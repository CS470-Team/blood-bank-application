from model import *

blood_banks = []

def write_sql_insert(entity) -> str:
    sql = entity.generate_sql_insert()
    filename, _ = dataclass_fields(entity)
    with open(f"queries/insert/{snake_case(filename)}.sql", "w") as f:
        f.write(sql)
        
    return sql
        
def write_monolith_sql(entities):
    with open("monolith.sql", "w") as monolith:
        monolith.write("""-- This file is generated by database/python/main.py.\n""")
        monolith.write("""-- Its purpose is to collect all queries/commands into a single file that can be executed by Professor Yerkes with less trouble than running them individually.\n""")
        monolith.write("""-- The create, delete, and update scripts were all written manually by me (Reece) and copied in while the insert statements were auto-generated in `model.py`. \n\n""")
        monolith.write("""-- Reece McMillin, CS470, 2022-05-02\n\n""")
        monolith.write(f"-- {'--'*80}\n\n")

        monolith.write("""-- Drop and recreate database\n\n""")
        monolith.write("""DROP DATABASE IF EXISTS `bloodbank`;\n""")
        monolith.write("""CREATE DATABASE `bloodbank`;\n\n""")

        monolith.write("""-- Drop existing tables\n\n""")
        with open("queries/delete/drop_tables.sql", "r") as delete:
            monolith.write(delete.read() + '\n\n')

        monolith.write("""-- Create the tables, stored procedures, and views (if any) in order.\n\n""")
        for script in ["queries/create/create_tables.sql", "queries/create/create_stored_procedures.sql", "queries/create/create_views.sql"]:
            with open(script, "r") as create:
                monolith.write(create.read() + '\n\n')
                
        monolith.write("""-- Insert Reece's auto-generated data\n\n""")
        for entity in entities:
            insert_entity_sql = write_sql_insert(entity)
            monolith.write(insert_entity_sql + '\n\n')
            
        monolith.write("""-- Add the foreign key constraints using a single transaction\n\n""")
        with open("queries/update/add_foreign_keys.sql", "r") as fk:
            monolith.write(fk.read() + '\n')
            

if __name__ == "__main__":
    entities = [Client, BloodBank, BloodBankEmployee, Hospital, HospitalEmployee, BloodTransfusion, BloodDonation]

    write_monolith_sql(entities)